
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Drive.v3
@using Google.Apis.Json
@using Google.Apis.Services
@using Google.Apis.Upload
@using Newtonsoft.Json
@inject IStringLocalizer<Resources.TeachersFormComponent> localizer
@inject IJSRuntime jsRun
@inject HttpClient Http
<section id="contact" class="contact">
    <div class="container" data-aos="fade-up">
        <div class="row">
            <div class="col-lg-6" data-aos="fade-right" data-aos-delay="100">
                <img src="school.jpg" class="img-fluid" alt="">
            </div>
            <div class="col-lg-6 pt-4 pt-lg-0 content d-flex flex-column justify-content-center" data-aos="fade-up"
                data-aos-delay="100">

                <form role="form" class="php-email-form" id="teacher-form">
                    <div class="col form-group">
                        <input type="text" name="Fullname" class="form-control" id="name"
                            oninput="ValidationIcon('name')" placeholder='@localizer["fullname"]' required>
                    </div>
                    <div class="col form-group">
                        <input type="email" class="form-control" oninput="ValidationIcon('email')" name="Email"
                            id="email" placeholder="@localizer["email"]" required>
                    </div>
                    <div class="form-group">
                        <input type="number" class="form-control" oninput="ValidationIcon('ExperienceInYears')" min="0"
                            name="ExperienceInYears" id="ExperienceInYears" placeholder="@localizer["experience"]"
                            required>
                    </div>
                    <div class="form-group">
                        <input type="tel" value="+998" class="form-control" oninput="ValidationIcon('phone')"
                            name="Phone" id="phone" placeholder="@localizer["phone"]" required>
                    </div>
                    <div class="form-group">
                        <InputFile class="form-control" OnChange="@Uploader" type="file" accept="application/pdf,
                            application/vnd.openxmlformats-officedocument.wordprocessingml.document"></InputFile>
                        <input type="hidden" id="myResume" name="myResume"
                            value="https://drive.google.com/drive/folders/1aAI3et6H61XOfMm2BcmCU5MXM84XmS-W">
                    </div>
                    <select class="form-select" name="EnglishLevel" aria-label="Default select example">
                        <option value="">@localizer["englishlevel"]</option>
                        <option value="A0">A0</option>
                        <option value="A1">A1</option>
                        <option value="A2">A2</option>
                        <option value="B1">B1</option>
                        <option value="B2">B2</option>
                        <option value="C1">C1</option>
                        <option value="C2">C2</option>
                    </select>
                    <div class="form-group mt-4">
                        <textarea class="form-control" name="Subject" rows="5" placeholder="@localizer["message"]"
                            required></textarea>
                    </div>
                    <div class="text-center"><button type="submit"
                            onclick="Send_Team_Data()">@localizer["send"]</button>
                    </div>
                    <div id="res_suc" hidden class="alert alert-success mt-3">@localizer["Success"]</div>
                    <div id="res_err" hidden class="alert alert-danger">@localizer["Error"]</div>
                </form>
            </div>
        </div>
    </div>
</section>
@code {
    private const string ServiceAccountEmail = "file-uploader@uploader-343216.iam.gserviceaccount.com";
    private const string DirectoryId = "1aAI3et6H61XOfMm2BcmCU5MXM84XmS-W";

    public async Task Uploader(InputFileChangeEventArgs inputFile)
    {
        string UploadFileName = inputFile.File.Name;

        var serializer= new JsonSerializer();
        // Load the Service account credentials and define the scope of its access.;
        dynamic credentialParameters;
        using (var fs = new FileStream("Json/uploader-343216-4b372db9b1b9.json", FileMode.Open, FileAccess.Read))
        {
                credentialParameters=
                NewtonsoftJsonSerializer.Instance.Deserialize<JsonCredentialParameters>(fs);
            if (credentialParameters.Type != "service_account" 
                || string.IsNullOrEmpty(credentialParameters.ClientEmail) 
                || string.IsNullOrEmpty(credentialParameters.PrivateKey))
                    throw new InvalidOperationException("JSON data does not represent a valid service account credential.");
            ServiceAccountCredential serer= new ServiceAccountCredential(
                new ServiceAccountCredential.Initializer(credentialParameters.ClientEmail)
                {
                    Scopes=credentialParameters.Scopes,
                    User = "file-uploader@uploader-343216.iam.gserviceaccount.com" //the user to be impersonated
                }.FromPrivateKey(credentialParameters.PrivateKey));


                    // Create the Drive service.
                var service = new DriveService(new BaseClientService.Initializer()
                {
                    HttpClientInitializer =serer
                });

                // Upload file Metadata
                var fileMetadata = new Google.Apis.Drive.v3.Data.File()
                {
                    Name = UploadFileName,
                    Parents = new List<string>() { "1aAI3et6H61XOfMm2BcmCU5MXM84XmS-W" }

                };
                string uploadedFileId;

                // Create a new file, with metadata and stream.
                var request = service.Files.Create(fileMetadata, inputFile.File.OpenReadStream(512000), "image/" +
                fileMetadata.Name.Substring(fileMetadata.Name.IndexOf('.') + 1));
                request.Fields = "*";
                var results = await request.UploadAsync(CancellationToken.None);

                if (results.Status == UploadStatus.Failed)
                {
                    Console.WriteLine($"Error uploading file: {results.Exception.Message}");
                }

                // the file id of the new file we created
                uploadedFileId = request.ResponseBody?.Id; 
        }

        
    }
   
}